"""
Used to generate slice .txt files from the .json annotation files generated by the annotator
"""

from absl import app, flags, logging
from absl.flags import FLAGS
import json
import os


def generate_slice_txts(annotation_path, slices_dir):
    """
    Generate slice .txt file in the slices_dir from the .json annotation file provided

    :param annotation_path: the path to the .json annotation file
    :param slices_dir: the path to the directory to save the slices .txt files
    :return: path of the saved slice .txt file, or None if error
    """

    annotation_path = os.path.normpath(annotation_path)  # make the paths OS (Windows) compatible
    annotation_dir, annotation_filename = os.path.split(annotation_path)  # get the dir and filename

    # check annotation file exists, throw error if not
    if not os.path.exists(annotation_path):
        logging.error("File {} does not exist.".format(annotation_path))
        return None

    # loads the annotation .json file
    with open(annotation_path, 'r') as f:
        database = json.load(f)

    # ensure the database contains the needed information
    if "classes" not in database.keys() or "USE" not in database["classes"].keys():
        logging.error("Database {} is not structured correctly, can't extract.\n"
                      "Needs 'classes' and 'USE' categories.".format(annotation_path))
        return None

    # make the slices directory if it doesn't exist
    os.makedirs(slices_dir, exist_ok=True)

    # save out the slices .txt file
    save_path = os.path.join(slices_dir, annotation_filename[:-5] + ".txt")
    with open(save_path, 'w') as f:
        for slice_ in database['classes']['USE']:
            f.write("{} {}\n".format(int(slice_['start']), int(slice_['end'])))

    logging.info("Successfully generated slices file {} containing {} slices.".format(save_path,
                                                                                      len(database['classes']['USE'])))

    return save_path


def main(_argv):  # main function
    generate_slice_txts(annotation_path=FLAGS.annotation_path, slices_dir=FLAGS.slices_dir)


if __name__ == "__main__":

    flags.DEFINE_string('annotation_path', 'data/annotations/V001.json',
                        'Path of the .json annotation file to generalise.')

    flags.DEFINE_string('slices_dir', 'data/slices/',
                        'The path of the slices directory to save the slice .txt files')

    try:
        app.run(main)
    except SystemExit:
        pass
