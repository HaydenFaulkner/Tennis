"""
Used to generate slice.txt files from the annotation files generated by the annotator
"""

import os
import argparse
import json

from config import config


def jsons_2_txts(annotation_dir, slices_dir, files=None):
    if files is None:
        files = [f for f in os.listdir(annotation_dir) if f.endswith(".json") and os.path.isfile(os.path.join(annotation_dir, f))]
    for file in files:
        json_2_txt(annotation_path=os.path.join(annotation_dir, file),
                   slices_path=os.path.join(slices_dir, file[:file.rfind(".")]+".txt"))


def json_2_txt(annotation_path, slices_path):

    if os.path.isfile(annotation_path):
        print("File %s exists. Loading it." % annotation_path)
        with open(annotation_path, 'r') as f:
            database = json.load(f)

        if "classes" not in database.keys():
            print("%s : Database is not structured correctly, can't extract." % annotation_path)
        elif "USE" not in database["classes"].keys():
            print("%s : Database is not structured correctly, can't extract." % annotation_path)
    else:
        print("Can't find file: %s" % annotation_path)
        return

    if not os.path.exists(slices_path[:slices_path.rfind("/")]):
        os.makedirs(slices_path[:slices_path.rfind("/")])

    count = 0
    with open(slices_path, 'w') as f:
        for i in range(0, len(database['classes']['USE'])):
            f.write(str(int(database['classes']['USE'][i]['start']))+' '+str(int(database['classes']['USE'][i]['end'])))
            count += 1
            # print(str(int(database['classes']['USE'][i]['start']))+' '+str(int(database['classes']['USE'][i]['end'])))
    print("Converted %d slices from %s" % (count, annotation_path))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--annotation_dir", type=str, default=config.directories.annotations,
                        help='Path to annotation directory')
    parser.add_argument("-o", "--slices_dir", type=str, default=config.directories.slices,
                        help='Path of directory where to save slice txt files')
    parser.add_argument("-f", "--files", nargs="+", default=None,
                        help='List of particular files to do. If omitted will set as None and do all .json files found in annotation_dir')
    args = parser.parse_args()

    jsons_2_txts(annotation_dir=args.annotation_dir,
                 slices_dir=args.slices_dir,
                 files=args.files)
